{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## HW6 Training Machine Learning Models\n",
    "\n",
    "#### This homework can not be dropped even it gets the lowest score in your homework, which means, the score you get from this homework will be counted towards your final grade. The lowest score from HW1 - HW5 will be dropped."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load Python libraries that you will use :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 260,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import numpy as np\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 261,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Pre-processing\n",
    "import warnings \n",
    "warnings.filterwarnings('ignore')\n",
    "from sklearn.impute import SimpleImputer\n",
    "\n",
    "from statsmodels.stats.outliers_influence import variance_inflation_factor\n",
    "from statsmodels.tools.tools import add_constant\n",
    "\n",
    "from sklearn import preprocessing\n",
    "from sklearn.preprocessing import StandardScaler\n",
    "\n",
    "#Training and testing split\n",
    "from sklearn.model_selection import train_test_split\n",
    "\n",
    "#Model\n",
    "from sklearn.linear_model import LogisticRegression\n",
    "from sklearn import tree\n",
    "\n",
    "#Evaluation: \n",
    "#import metrics\n",
    "from sklearn import metrics\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import roc_curve\n",
    "from sklearn.metrics import confusion_matrix"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Load your Analytical Base Table from HW5 :"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 262,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('ABT.xlsx', index_col = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 263,
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SessionID</th>\n",
       "      <th>item_cnt_per_ses</th>\n",
       "      <th>click_weekday</th>\n",
       "      <th>avg_clicks_items</th>\n",
       "      <th>Time_bucket</th>\n",
       "      <th>top_click_cat</th>\n",
       "      <th>click_hour</th>\n",
       "      <th>session_length</th>\n",
       "      <th>diff_item</th>\n",
       "      <th>item_cnt_in_ses</th>\n",
       "      <th>diff_cat</th>\n",
       "      <th>max_clicks_items_in_ses</th>\n",
       "      <th>pred_target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9194351</td>\n",
       "      <td>5</td>\n",
       "      <td>Monday</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>S</td>\n",
       "      <td>10</td>\n",
       "      <td>320</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9194429</td>\n",
       "      <td>2</td>\n",
       "      <td>Monday</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>S</td>\n",
       "      <td>6</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9194513</td>\n",
       "      <td>3</td>\n",
       "      <td>Monday</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>S</td>\n",
       "      <td>7</td>\n",
       "      <td>883</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9194692</td>\n",
       "      <td>1</td>\n",
       "      <td>Monday</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>S</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9194824</td>\n",
       "      <td>1</td>\n",
       "      <td>Monday</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>9195173</td>\n",
       "      <td>4</td>\n",
       "      <td>Monday</td>\n",
       "      <td>4</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>14</td>\n",
       "      <td>95</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>2</td>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>9195209</td>\n",
       "      <td>3</td>\n",
       "      <td>Monday</td>\n",
       "      <td>3</td>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>13</td>\n",
       "      <td>2099</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>9195293</td>\n",
       "      <td>6</td>\n",
       "      <td>Monday</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>5</td>\n",
       "      <td>1141</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9195293</td>\n",
       "      <td>6</td>\n",
       "      <td>Monday</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>6</td>\n",
       "      <td>1141</td>\n",
       "      <td>5</td>\n",
       "      <td>6</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9195417</td>\n",
       "      <td>8</td>\n",
       "      <td>Monday</td>\n",
       "      <td>8</td>\n",
       "      <td>3</td>\n",
       "      <td>6</td>\n",
       "      <td>15</td>\n",
       "      <td>2090</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1</td>\n",
       "      <td>8</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   SessionID  item_cnt_per_ses click_weekday  avg_clicks_items  Time_bucket  \\\n",
       "0    9194351                 5        Monday                 5            2   \n",
       "1    9194429                 2        Monday                 2            1   \n",
       "2    9194513                 3        Monday                 3            2   \n",
       "3    9194692                 1        Monday                 1            3   \n",
       "4    9194824                 1        Monday                 1            1   \n",
       "5    9195173                 4        Monday                 4            3   \n",
       "6    9195209                 3        Monday                 3            3   \n",
       "7    9195293                 6        Monday                 6            1   \n",
       "8    9195293                 6        Monday                 6            1   \n",
       "9    9195417                 8        Monday                 8            3   \n",
       "\n",
       "  top_click_cat  click_hour  session_length  diff_item  item_cnt_in_ses  \\\n",
       "0             S          10             320          5                5   \n",
       "1             S           6              60          1                2   \n",
       "2             S           7             883          2                3   \n",
       "3             S          18               0          1                1   \n",
       "4             1           1               0          1                1   \n",
       "5             0          14              95          2                4   \n",
       "6             0          13            2099          1                3   \n",
       "7             0           5            1141          5                6   \n",
       "8             0           6            1141          5                6   \n",
       "9             6          15            2090          3                8   \n",
       "\n",
       "   diff_cat   max_clicks_items_in_ses  pred_target  \n",
       "0         1                         5            0  \n",
       "1         1                         2            0  \n",
       "2         1                         3            0  \n",
       "3         1                         1            0  \n",
       "4         1                         1            0  \n",
       "5         2                         4            0  \n",
       "6         1                         3            1  \n",
       "7         2                         6            1  \n",
       "8         2                         6            1  \n",
       "9         1                         8            0  "
      ]
     },
     "execution_count": 263,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 264,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(125086, 13)"
      ]
     },
     "execution_count": 264,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 265,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SessionID</th>\n",
       "      <th>item_cnt_per_ses</th>\n",
       "      <th>avg_clicks_items</th>\n",
       "      <th>Time_bucket</th>\n",
       "      <th>click_hour</th>\n",
       "      <th>session_length</th>\n",
       "      <th>diff_item</th>\n",
       "      <th>item_cnt_in_ses</th>\n",
       "      <th>diff_cat</th>\n",
       "      <th>max_clicks_items_in_ses</th>\n",
       "      <th>pred_target</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>1.250860e+05</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "      <td>125086.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>1.060011e+07</td>\n",
       "      <td>6.375222</td>\n",
       "      <td>6.375222</td>\n",
       "      <td>2.642494</td>\n",
       "      <td>13.277577</td>\n",
       "      <td>983.930496</td>\n",
       "      <td>4.742049</td>\n",
       "      <td>6.375222</td>\n",
       "      <td>1.478895</td>\n",
       "      <td>6.375222</td>\n",
       "      <td>0.547144</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>5.800217e+05</td>\n",
       "      <td>8.412258</td>\n",
       "      <td>8.412258</td>\n",
       "      <td>0.882358</td>\n",
       "      <td>4.954702</td>\n",
       "      <td>1576.162306</td>\n",
       "      <td>6.157207</td>\n",
       "      <td>8.412258</td>\n",
       "      <td>0.888930</td>\n",
       "      <td>8.412258</td>\n",
       "      <td>0.497775</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>9.194351e+06</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>1.013130e+07</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>9.000000</td>\n",
       "      <td>83.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>1.063628e+07</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>13.000000</td>\n",
       "      <td>384.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>1.109039e+07</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>3.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>1219.000000</td>\n",
       "      <td>6.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>2.000000</td>\n",
       "      <td>8.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>1.156211e+07</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>4.000000</td>\n",
       "      <td>23.000000</td>\n",
       "      <td>29262.000000</td>\n",
       "      <td>166.000000</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>11.000000</td>\n",
       "      <td>197.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "          SessionID  item_cnt_per_ses  avg_clicks_items    Time_bucket  \\\n",
       "count  1.250860e+05     125086.000000     125086.000000  125086.000000   \n",
       "mean   1.060011e+07          6.375222          6.375222       2.642494   \n",
       "std    5.800217e+05          8.412258          8.412258       0.882358   \n",
       "min    9.194351e+06          1.000000          1.000000       1.000000   \n",
       "25%    1.013130e+07          2.000000          2.000000       2.000000   \n",
       "50%    1.063628e+07          4.000000          4.000000       3.000000   \n",
       "75%    1.109039e+07          8.000000          8.000000       3.000000   \n",
       "max    1.156211e+07        197.000000        197.000000       4.000000   \n",
       "\n",
       "          click_hour  session_length      diff_item  item_cnt_in_ses  \\\n",
       "count  125086.000000   125086.000000  125086.000000    125086.000000   \n",
       "mean       13.277577      983.930496       4.742049         6.375222   \n",
       "std         4.954702     1576.162306       6.157207         8.412258   \n",
       "min         0.000000        0.000000       1.000000         1.000000   \n",
       "25%         9.000000       83.000000       2.000000         2.000000   \n",
       "50%        13.000000      384.000000       3.000000         4.000000   \n",
       "75%        18.000000     1219.000000       6.000000         8.000000   \n",
       "max        23.000000    29262.000000     166.000000       197.000000   \n",
       "\n",
       "            diff_cat   max_clicks_items_in_ses    pred_target  \n",
       "count  125086.000000             125086.000000  125086.000000  \n",
       "mean        1.478895                  6.375222       0.547144  \n",
       "std         0.888930                  8.412258       0.497775  \n",
       "min         1.000000                  1.000000       0.000000  \n",
       "25%         1.000000                  2.000000       0.000000  \n",
       "50%         1.000000                  4.000000       1.000000  \n",
       "75%         2.000000                  8.000000       1.000000  \n",
       "max        11.000000                197.000000       1.000000  "
      ]
     },
     "execution_count": 265,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 266,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 125086 entries, 0 to 125085\n",
      "Data columns (total 13 columns):\n",
      " #   Column                    Non-Null Count   Dtype \n",
      "---  ------                    --------------   ----- \n",
      " 0   SessionID                 125086 non-null  int64 \n",
      " 1   item_cnt_per_ses          125086 non-null  int64 \n",
      " 2   click_weekday             125086 non-null  object\n",
      " 3   avg_clicks_items          125086 non-null  int64 \n",
      " 4   Time_bucket               125086 non-null  int64 \n",
      " 5   top_click_cat             125086 non-null  object\n",
      " 6   click_hour                125086 non-null  int64 \n",
      " 7   session_length            125086 non-null  int64 \n",
      " 8   diff_item                 125086 non-null  int64 \n",
      " 9   item_cnt_in_ses           125086 non-null  int64 \n",
      " 10  diff_cat                  125086 non-null  int64 \n",
      " 11   max_clicks_items_in_ses  125086 non-null  int64 \n",
      " 12  pred_target               125086 non-null  int64 \n",
      "dtypes: int64(11), object(2)\n",
      "memory usage: 13.4+ MB\n"
     ]
    }
   ],
   "source": [
    "df.info()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data Pre-Processing   -- 20 points \n",
    "\n",
    " Examples: \n",
    " \n",
    "             Categorical data encoding \n",
    "             Missing data imputation \n",
    "             Data normalization and standardization \n",
    "             Split train and test datasets"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Converting categorical string to numeric"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 267,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['click_weekday'] = df['click_weekday'].map (lambda x:1 if ('Monday' in x)\n",
    "                                            else 2 if ('Tuesday' in x)\n",
    "                                            else 3 if ('Wednesday' in x)\n",
    "                                            else 4 if ('Thursday' in x)\n",
    "                                            else 5 if ('Friday' in x)\n",
    "                                            else 6 if ('Saturday' in x)\n",
    "                                            else 7  )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 268,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy=pd.get_dummies(df['top_click_cat'])\n",
    "df_new=pd.concat([df,dummy], axis=1)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 269,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(125086, 39)"
      ]
     },
     "execution_count": 269,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 270,
   "metadata": {},
   "outputs": [],
   "source": [
    "df_new.drop(columns=['top_click_cat'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 271,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>SessionID</th>\n",
       "      <th>item_cnt_per_ses</th>\n",
       "      <th>click_weekday</th>\n",
       "      <th>avg_clicks_items</th>\n",
       "      <th>Time_bucket</th>\n",
       "      <th>click_hour</th>\n",
       "      <th>session_length</th>\n",
       "      <th>diff_item</th>\n",
       "      <th>item_cnt_in_ses</th>\n",
       "      <th>diff_cat</th>\n",
       "      <th>...</th>\n",
       "      <th>2089538467</th>\n",
       "      <th>2089615685</th>\n",
       "      <th>3</th>\n",
       "      <th>4</th>\n",
       "      <th>5</th>\n",
       "      <th>6</th>\n",
       "      <th>7</th>\n",
       "      <th>8</th>\n",
       "      <th>9</th>\n",
       "      <th>S</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>9194351</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>5</td>\n",
       "      <td>2</td>\n",
       "      <td>10</td>\n",
       "      <td>320</td>\n",
       "      <td>5</td>\n",
       "      <td>5</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>9194429</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>6</td>\n",
       "      <td>60</td>\n",
       "      <td>1</td>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>9194513</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>2</td>\n",
       "      <td>7</td>\n",
       "      <td>883</td>\n",
       "      <td>2</td>\n",
       "      <td>3</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>9194692</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>3</td>\n",
       "      <td>18</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>9194824</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 38 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   SessionID  item_cnt_per_ses  click_weekday  avg_clicks_items  Time_bucket  \\\n",
       "0    9194351                 5              1                 5            2   \n",
       "1    9194429                 2              1                 2            1   \n",
       "2    9194513                 3              1                 3            2   \n",
       "3    9194692                 1              1                 1            3   \n",
       "4    9194824                 1              1                 1            1   \n",
       "\n",
       "   click_hour  session_length  diff_item  item_cnt_in_ses  diff_cat  ...  \\\n",
       "0          10             320          5                5         1  ...   \n",
       "1           6              60          1                2         1  ...   \n",
       "2           7             883          2                3         1  ...   \n",
       "3          18               0          1                1         1  ...   \n",
       "4           1               0          1                1         1  ...   \n",
       "\n",
       "   2089538467  2089615685  3  4  5  6  7  8  9  S  \n",
       "0           0           0  0  0  0  0  0  0  0  1  \n",
       "1           0           0  0  0  0  0  0  0  0  1  \n",
       "2           0           0  0  0  0  0  0  0  0  1  \n",
       "3           0           0  0  0  0  0  0  0  0  1  \n",
       "4           0           0  0  0  0  0  0  0  0  0  \n",
       "\n",
       "[5 rows x 38 columns]"
      ]
     },
     "execution_count": 271,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Missing Data Imputation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 272,
   "metadata": {},
   "outputs": [],
   "source": [
    "imputer = SimpleImputer(missing_values=np.nan, strategy='median')\n",
    "imputer.fit(df_new)\n",
    "X = imputer.transform(df_new)\n",
    "train_tr = pd.DataFrame(X, columns = df_new.columns)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 273,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "Int64Index: 125086 entries, 0 to 125085\n",
      "Data columns (total 38 columns):\n",
      " #   Column                    Non-Null Count   Dtype\n",
      "---  ------                    --------------   -----\n",
      " 0   SessionID                 125086 non-null  int64\n",
      " 1   item_cnt_per_ses          125086 non-null  int64\n",
      " 2   click_weekday             125086 non-null  int64\n",
      " 3   avg_clicks_items          125086 non-null  int64\n",
      " 4   Time_bucket               125086 non-null  int64\n",
      " 5   click_hour                125086 non-null  int64\n",
      " 6   session_length            125086 non-null  int64\n",
      " 7   diff_item                 125086 non-null  int64\n",
      " 8   item_cnt_in_ses           125086 non-null  int64\n",
      " 9   diff_cat                  125086 non-null  int64\n",
      " 10   max_clicks_items_in_ses  125086 non-null  int64\n",
      " 11  pred_target               125086 non-null  int64\n",
      " 12  0                         125086 non-null  uint8\n",
      " 13  1                         125086 non-null  uint8\n",
      " 14  10                        125086 non-null  uint8\n",
      " 15  11                        125086 non-null  uint8\n",
      " 16  12                        125086 non-null  uint8\n",
      " 17  2                         125086 non-null  uint8\n",
      " 18  2088966377                125086 non-null  uint8\n",
      " 19  2088973177                125086 non-null  uint8\n",
      " 20  2089221555                125086 non-null  uint8\n",
      " 21  2089286907                125086 non-null  uint8\n",
      " 22  2089287217                125086 non-null  uint8\n",
      " 23  2089300095                125086 non-null  uint8\n",
      " 24  2089318666                125086 non-null  uint8\n",
      " 25  2089404239                125086 non-null  uint8\n",
      " 26  2089422131                125086 non-null  uint8\n",
      " 27  2089437536                125086 non-null  uint8\n",
      " 28  2089538467                125086 non-null  uint8\n",
      " 29  2089615685                125086 non-null  uint8\n",
      " 30  3                         125086 non-null  uint8\n",
      " 31  4                         125086 non-null  uint8\n",
      " 32  5                         125086 non-null  uint8\n",
      " 33  6                         125086 non-null  uint8\n",
      " 34  7                         125086 non-null  uint8\n",
      " 35  8                         125086 non-null  uint8\n",
      " 36  9                         125086 non-null  uint8\n",
      " 37  S                         125086 non-null  uint8\n",
      "dtypes: int64(12), uint8(26)\n",
      "memory usage: 15.5 MB\n"
     ]
    }
   ],
   "source": [
    "df_new.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 274,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "SessionID                   0\n",
       "item_cnt_per_ses            0\n",
       "click_weekday               0\n",
       "avg_clicks_items            0\n",
       "Time_bucket                 0\n",
       "click_hour                  0\n",
       "session_length              0\n",
       "diff_item                   0\n",
       "item_cnt_in_ses             0\n",
       "diff_cat                    0\n",
       " max_clicks_items_in_ses    0\n",
       "pred_target                 0\n",
       "0                           0\n",
       "1                           0\n",
       "10                          0\n",
       "11                          0\n",
       "12                          0\n",
       "2                           0\n",
       "2088966377                  0\n",
       "2088973177                  0\n",
       "2089221555                  0\n",
       "2089286907                  0\n",
       "2089287217                  0\n",
       "2089300095                  0\n",
       "2089318666                  0\n",
       "2089404239                  0\n",
       "2089422131                  0\n",
       "2089437536                  0\n",
       "2089538467                  0\n",
       "2089615685                  0\n",
       "3                           0\n",
       "4                           0\n",
       "5                           0\n",
       "6                           0\n",
       "7                           0\n",
       "8                           0\n",
       "9                           0\n",
       "S                           0\n",
       "dtype: int64"
      ]
     },
     "execution_count": 274,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df_new.isnull().sum()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Data normalization and standardization"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 275,
   "metadata": {},
   "outputs": [],
   "source": [
    "X = preprocessing.normalize(X)\n",
    "X = preprocessing.scale(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 276,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Standardize features by removing the mean and scaling to unit variance\n",
    "\n",
    "sc = StandardScaler()\n",
    "sc.fit(X_train) #Compute the mean and std to be used for later scaling.\n",
    "X_train_std = sc.transform(X_train)\n",
    "X_test_std = sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "###### Split data into train and test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 277,
   "metadata": {},
   "outputs": [],
   "source": [
    "X= df_new.loc[:,~df_new.columns.isin(['SessionID','pred_target'])]\n",
    "#dependent variable:\n",
    "y=df_new.loc[:,'pred_target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 278,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3,random_state=42)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Develop two machine learning models to predict buy or not buy event, you can use any machine learning algorithms that we learned from class, or other ones not learning in class\n",
    "\n",
    "Each model training -- 15 points\\\n",
    "Model validation -- 15 points , you can use f1, plot roc curve or roc auc score for evaluation"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Logistic Regression:"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 279,
   "metadata": {},
   "outputs": [],
   "source": [
    "log_reg = LogisticRegression(C=1000.0, random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 280,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "LogisticRegression(C=1000.0, class_weight=None, dual=False, fit_intercept=True,\n",
       "                   intercept_scaling=1, l1_ratio=None, max_iter=100,\n",
       "                   multi_class='auto', n_jobs=None, penalty='l2',\n",
       "                   random_state=42, solver='lbfgs', tol=0.0001, verbose=0,\n",
       "                   warm_start=False)"
      ]
     },
     "execution_count": 280,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "log_reg.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 281,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=log_reg.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 282,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.7007193586546783"
      ]
     },
     "execution_count": 282,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 283,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[12454,  4575],\n",
       "       [ 6762, 13735]])"
      ]
     },
     "execution_count": 283,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 284,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpr, tpr, threshold = roc_curve(y_test, y_pred)\n",
    "df = pd.DataFrame(dict(fpr = fpr, tpr =tpr))\n",
    "roc_auc = metrics.auc(fpr,tpr)\n",
    "\n",
    "plt.title('Train ROC curve')\n",
    "plt.plot(fpr,tpr,'b', label = 'AUC = %0.2f' % roc_auc)\n",
    "plt.plot([0,1],[0,1],'r--')\n",
    "plt.xlim([0,1])\n",
    "plt.ylim([0,1])\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.legend(loc= 'lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Decision Tree"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 286,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('ABT.xlsx', index_col = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 287,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['click_weekday'] = df['click_weekday'].map (lambda x:1 if ('Monday' in x)\n",
    "                                            else 2 if ('Tuesday' in x)\n",
    "                                            else 3 if ('Wednesday' in x)\n",
    "                                            else 4 if ('Thursday' in x)\n",
    "                                            else 5 if ('Friday' in x)\n",
    "                                            else 6 if ('Saturday' in x)\n",
    "                                            else 7  )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 288,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy=pd.get_dummies(df['top_click_cat'])\n",
    "df_new=pd.concat([df,dummy], axis=1)\n",
    "df_new.drop(columns=['top_click_cat'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 289,
   "metadata": {},
   "outputs": [],
   "source": [
    "normalized_X = preprocessing.normalize(X)\n",
    "standardized_X = preprocessing.scale(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 290,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Standardize features by removing the mean and scaling to unit variance\n",
    "\n",
    "sc = StandardScaler()\n",
    "sc.fit(X_train) #Compute the mean and std to be used for later scaling.\n",
    "X_train_std = sc.transform(X_train)\n",
    "X_test_std = sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 291,
   "metadata": {},
   "outputs": [],
   "source": [
    "X= df_new.loc[:,~df_new.columns.isin(['SessionID','pred_target'])]\n",
    "#dependent variable:\n",
    "y=df_new.loc[:,'pred_target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 292,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 293,
   "metadata": {},
   "outputs": [],
   "source": [
    "clf = tree.DecisionTreeClassifier()\n",
    "clf = clf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 294,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred = clf.predict(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 295,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       ...,\n",
       "       [0., 1.],\n",
       "       [0., 1.],\n",
       "       [0., 1.]])"
      ]
     },
     "execution_count": 295,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clf.predict_proba(X_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 296,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9693010876895687"
      ]
     },
     "execution_count": 296,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_train,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 297,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpr, tpr, threshold = roc_curve(y_train, y_pred)\n",
    "df = pd.DataFrame(dict(fpr = fpr, tpr =tpr))\n",
    "roc_auc = metrics.auc(fpr,tpr)\n",
    "\n",
    "plt.title('Train ROC curve')\n",
    "plt.plot(fpr,tpr,'b', label = 'AUC = %0.2f' % roc_auc)\n",
    "plt.plot([0,1],[0,1],'r--')\n",
    "plt.xlim([0,1])\n",
    "plt.ylim([0,1])\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.legend(loc= 'lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": 298,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.9963104898478711"
      ]
     },
     "execution_count": 298,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clr = tree.DecisionTreeRegressor()\n",
    "clr = clr.fit(X_train,y_train)\n",
    "y_pred_r = clr.predict(X_train)\n",
    "roc_auc_score(y_train,y_pred_r)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 299,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpr, tpr, threshold = roc_curve(y_train, y_pred)\n",
    "df = pd.DataFrame(dict(fpr = fpr, tpr =tpr))\n",
    "roc_auc = metrics.auc(fpr,tpr)\n",
    "\n",
    "plt.title('Train ROC curve')\n",
    "plt.plot(fpr,tpr,'b', label = 'AUC = %0.2f' % roc_auc)\n",
    "plt.plot([0,1],[0,1],'r--')\n",
    "plt.xlim([0,1])\n",
    "plt.ylim([0,1])\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.legend(loc= 'lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Random Forest"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 300,
   "metadata": {},
   "outputs": [],
   "source": [
    "df = pd.read_excel('ABT.xlsx', index_col = 0)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 301,
   "metadata": {},
   "outputs": [],
   "source": [
    "df['click_weekday'] = df['click_weekday'].map (lambda x:1 if ('Monday' in x)\n",
    "                                            else 2 if ('Tuesday' in x)\n",
    "                                            else 3 if ('Wednesday' in x)\n",
    "                                            else 4 if ('Thursday' in x)\n",
    "                                            else 5 if ('Friday' in x)\n",
    "                                            else 6 if ('Saturday' in x)\n",
    "                                            else 7  )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 302,
   "metadata": {},
   "outputs": [],
   "source": [
    "dummy=pd.get_dummies(df['top_click_cat'])\n",
    "df_new=pd.concat([df,dummy], axis=1)\n",
    "df_new.drop(columns=['top_click_cat'],inplace=True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 303,
   "metadata": {},
   "outputs": [],
   "source": [
    "normalized_X = preprocessing.normalize(X)\n",
    "standardized_X = preprocessing.scale(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 304,
   "metadata": {},
   "outputs": [],
   "source": [
    "#Standardize features by removing the mean and scaling to unit variance\n",
    "\n",
    "sc = StandardScaler()\n",
    "sc.fit(X_train) #Compute the mean and std to be used for later scaling.\n",
    "X_train_std = sc.transform(X_train)\n",
    "X_test_std = sc.transform(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 305,
   "metadata": {},
   "outputs": [],
   "source": [
    "X= df_new.loc[:,~df_new.columns.isin(['SessionID','pred_target'])]\n",
    "#dependent variable:\n",
    "y=df_new.loc[:,'pred_target']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 306,
   "metadata": {},
   "outputs": [],
   "source": [
    "X_train, X_test, y_train, y_test= train_test_split(X,y,test_size=0.3,random_state=42)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 307,
   "metadata": {},
   "outputs": [],
   "source": [
    "classification_rf=tree.DecisionTreeClassifier()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 308,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "DecisionTreeClassifier(ccp_alpha=0.0, class_weight=None, criterion='gini',\n",
       "                       max_depth=None, max_features=None, max_leaf_nodes=None,\n",
       "                       min_impurity_decrease=0.0, min_impurity_split=None,\n",
       "                       min_samples_leaf=1, min_samples_split=2,\n",
       "                       min_weight_fraction_leaf=0.0, presort='deprecated',\n",
       "                       random_state=None, splitter='best')"
      ]
     },
     "execution_count": 308,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "classification_rf.fit(X_train,y_train)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 309,
   "metadata": {},
   "outputs": [],
   "source": [
    "y_pred=classification_rf.predict(X_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 310,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0.708491007965247"
      ]
     },
     "execution_count": 310,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "roc_auc_score(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "##### Evaluation"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 311,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([[12123,  4906],\n",
       "       [ 6045, 14452]])"
      ]
     },
     "execution_count": 311,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "confusion_matrix(y_test,y_pred)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 312,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "fpr, tpr, threshold = roc_curve(y_test, y_pred)\n",
    "df = pd.DataFrame(dict(fpr = fpr, tpr =tpr))\n",
    "roc_auc = metrics.auc(fpr,tpr)\n",
    "\n",
    "plt.title('Train ROC curve')\n",
    "plt.plot(fpr,tpr,'b', label = 'AUC = %0.2f' % roc_auc)\n",
    "plt.plot([0,1],[0,1],'r--')\n",
    "plt.xlim([0,1])\n",
    "plt.ylim([0,1])\n",
    "plt.ylabel('True Positive Rate')\n",
    "plt.xlabel('False Positive Rate')\n",
    "plt.legend(loc= 'lower right')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Explain pros and cons in each of your models; explain your evaluation results from training and test dataset and which model you would recommend.\n",
    "### This is not a coding task but use your writing skills.\n",
    "\n",
    "-- 20 points"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Analysis :"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I have used three modeling techniques in my analysis. I have created models using Logistics Regression method, decision tree model, and using Random Forest.\n",
    "\n",
    "### Model 1: Logistic Regression\n",
    "\n",
    "The first model was created using Logistic Regression technique and the AUC score was 0.70. The score is a moderate high value and has true positive and true negative values that are comparatively high.\n",
    "\n",
    "###### Pros of Logistic Regression:\n",
    "\n",
    "•\tThe logistic regression model is linear in nature and can be easy to understand and explain.\n",
    "\n",
    "•\tThe model created is comparatively simple in nature.\n",
    "\n",
    "•\tThe model can be expected to perform with certain level of reliability across the dataset. The model quality is dependent on the quality and quantity of the training dataset\n",
    "\n",
    "•\tSince the model is simple in nature, there is no need to fine tune the constituent parameters.\n",
    "\n",
    "###### Cons of Logistic Regression:\n",
    "•\tIt is difficult for the Logistic Regression models to handle non-linear data points within the model.\n",
    "\n",
    "### Model 2: Decision Tree\n",
    "\n",
    "The second model was created using Decision Tree technique and the model AUC score was 0.97. The score is a very high value and show characteristics of overfitting the data.\n",
    "\n",
    "###### Pros of Decision Tree:\n",
    "\n",
    "•\tDecision Tree models are easy to understand and explain.\n",
    "\n",
    "•\tThese models can handle the missing values more robust.\n",
    "\n",
    "•\tNormalization of data is not required for decision tree models.\n",
    "\n",
    "###### Cons of Decision Tree:\n",
    "\n",
    "•\tThe model is prone to overfitting.\n",
    "\n",
    "•\tThe model is largely dependent on the quality of data. Slight variations in the data can result in a great change to the outcome.\n",
    "\n",
    "•\tThe time taken to train and generate the model is very high\n",
    "\n",
    "### Model 3: Random Forest\n",
    "\n",
    "The third model was created using Random forest and the model AUC score was 0.71. The score is comparatively high and can be interpreted that the model that was created on the training dataset was successful in the prediction of the test dataset. The true positive and true negative values are higher than the previous models. This shows that the Random Forest model is marginally better than the Logistic Regression model. \n",
    "\n",
    "###### Pros of Random Forest:\n",
    "\n",
    "•\tThe random forest models are robust in nature. It is much easier to account for non-linear data points with the model. The random forest models are generally reliable and can accommodate non-linear data points.\n",
    "\n",
    "•\tThe model has the capability to perform at a higher degree when compared to the Logistic Regression models given the Random Forest model is fine tuned to accommodate various variations of datasets. \n",
    "\n",
    "###### Cons of Random Forest:\n",
    "\n",
    "•\tIt is difficult to explain the Random Forest model. In a business application, one must understand that the people responsible for making decisions might not be aware of the different techniques being used. It is imperative in this scenario to be able to explain the model in simple terms. This can be a challenge with the Random Forest models because of the inherent design of the model.\n",
    "\n",
    "•\tThe associated parameters of the model must be specified. Fine tuning the parameters like number of trees and tree depth can be time consuming.\n",
    "\n",
    "###### Looking at the three alternatives, with our data, Random Forest and Logistic Regression models can be preferred when compared to the Decision Tree model. Eventhough decision tree shows a higher precision, that might be due to overfitting. Within random forest and logistic regression, random forest shows slightly higher precision and thus it is recommended.\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
